(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{223:function(t,e,r){"use strict";r.r(e);var a=r(0),u=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"vue一些对比"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue一些对比","aria-hidden":"true"}},[t._v("#")]),t._v(" Vue一些对比")]),t._v(" "),r("h4",{attrs:{id:"一、methods和computed"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、methods和computed","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、methods和computed")]),t._v(" "),r("ul",[r("li",[t._v("computed是计算属性，methods是方法。")]),t._v(" "),r("li",[t._v("computed计算属性是基于它们的依赖进行==缓存==的")]),t._v(" "),r("li",[t._v("computed只有在它的相关依赖发生改变时才会重新求值")]),t._v(" "),r("li",[t._v("而对于method ，只要发生重新渲染，method 调用==总会==执行该函数")]),t._v(" "),r("li",[t._v("==总之：数据量大，需要缓存的时候用computed；每次确实需要重新加载，不需要缓存时用methods==")])]),t._v(" "),r("h4",{attrs:{id:"二、computed和watch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、computed和watch","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、computed和watch")]),t._v(" "),r("ul",[r("li",[t._v("计算属性是==计算属性==，==侦听器watch==是侦听器watch")]),t._v(" "),r("li",[t._v("侦听器watch是侦听一个特定的值，当该值变化时执行特定的函数")])]),t._v(" "),r("h4",{attrs:{id:"三、-router和-route"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、-router和-route","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、$router和$route")]),t._v(" "),r("ul",[r("li",[t._v("router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象")]),t._v(" "),r("li",[t._v("route相当于当前正在跳转的路由对象。。可以从里面获取name,path,params,query等")]),t._v(" "),r("li",[t._v("打印this.$route和this.$router，==两个同时存在==。")]),t._v(" "),r("li",[t._v("两者传参方式相同")])])])}],!1,null,null,null);e.default=u.exports}}]);